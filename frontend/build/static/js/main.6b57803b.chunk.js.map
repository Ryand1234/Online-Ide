{"version":3,"sources":["util/dimension.js","component/ide.componenent.jsx","pages/main.component.jsx","App.js","serviceWorker.js","index.js"],"names":["getWindowDimensions","width","$","window","size","tempCode","python","c","typescript","cpp","ruby","clanguage","IDE","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","code","setCode","language","setLanguage","ext","setExt","output","setOutput","input","setInput","handleSubmit","e","a","preventDefault","data","lang","options","method","headers","Accept","body","JSON","stringify","fetch","res","json","ndata","selectOnLineNumbers","fontSize","colorDecorators","height","defaultValue","value","theme","onChange","newValue","target","name","onClick","className","style","color","backgroundColor","onKeyUp","borderColor","rows","cols","placeholder","readOnly","href","PAGE","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b57803b.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport $ from 'jquery'\n\nfunction getWindowDimensions() {\n  const width = $(window).width()\n  var size;\n  if(width < 750)\n    size = 25;\n  else\n    size = 15\n  return {\n    width,\n    size\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import MonacoEditor from 'react-monaco-editor'\nimport React, {useEffect, useState} from 'react'\nimport useWindowDimensions from '../util/dimension';\nimport '../pages/main.css'\n\nvar typescript = `//Define TypeScript Interface\ninterface IPerson{\n\tname: String;\n\tage: Number;\n\tmobile: Number;\n}\n\n//TypeScript Interface can be used \n//to know what values a variable holds.\nconst Aman:IPerson = {\n\tname: \"Aman\",\n\tage: 23,\n\tmobile: 9874563215\n}\n`\n\nvar python = `'''Write your code here'''\n`\n\nvar c = `#include <stdio.h>\n\nint main()\n{\n\t//Enter your code here\n\treturn 0;\n}\n`\n\nvar cpp = `#include <iostream>\nusing namespace std;\n\nint main()\n{\n\t//Enter your code here\n\treturn 0;\n}\n`\n\nvar ruby = `#Write Your Code here\n`\n\nvar tempCode = {\n\tpython: python,\n\tc: c,\n\ttypescript: typescript,\n\tcpp: cpp,\n\truby: ruby\n}\n\nvar clanguage = {}\n\nclanguage['c'] = 'c';\nclanguage['cpp'] = 'cpp';\nclanguage['rb'] = 'ruby';\nclanguage['py'] = 'python';\nclanguage['typescript'] = 'typescript';\n\n\nconst IDE = () => {\n\n\tconst {width, size} = useWindowDimensions();\n\tconst [code, setCode] = useState(tempCode['typescript']);\n\tconst [language, setLanguage] = useState('typescript');\n\tconst [ext, setExt] = useState('ts');\n\tconst [output, setOutput] = useState('');\n\tconst [input, setInput] = useState('');\n\n\tconst onChange = (newValue, e) =>{\n\t\tsetCode(newValue)\n\t}\n\n\tconst handleInput = (e) =>{\n\t\tsetInput(e.target.value)\n\t}\n\n\n\tconst handleLanguage = (e) =>{\n\t\tsetLanguage(clanguage[e.target.value]);\n\t\tsetExt(e.target.value);\n\t\tsetCode(tempCode[clanguage[e.target.value]]);\n\t\tsetOutput('')\n\t\tsetInput('')\n\n\t}\t\n\n\tconst handleSubmit = async(e) => {\n\t\te.preventDefault();\n\t\tvar data = {\n\t\t\tcode: code,\n\t\t\tinput: input,\n\t\t\tlang: ext\n\t\t}\n\t\tvar options = {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t      'Content-type': 'application/json',\n\t\t      Accept: 'application/json'\n\t\t    },\n\t\t\tbody: JSON.stringify(data)\n\t\t}\n\t\tvar res = await fetch(\"submit\", options);\n\t\tvar ndata = await res.json()\n\t\tsetOutput(ndata.output)\n\t}\n\n\tconst options = {\n      selectOnLineNumbers: true,\n      fontSize: {size},\n      colorDecorators: true\n    };\n\treturn(\n\t\t<>\n\t\t<div>\n\t\t\t<MonacoEditor\n\t\t\t\twidth={width}\n\t\t\t\theight=\"300\"\n\t\t\t\tdefaultValue=''\n\t\t\t\tvalue={code}\n\t\t\t\ttheme=\"vs-dark\"\n\t\t\t\toptions={options}\n\t\t\t\tlanguage={language}\n\t\t\t\tonChange={onChange}\n\t\t\t/>\n\t\t\t<select onChange={handleLanguage} name=\"lang\">\n\t\t\t\t<option  value=\"typescript\">TypeScript</option>\n\t\t\t\t<option value=\"c\">C</option>\n\t\t\t\t<option value=\"cpp\">C++14</option>\n\t\t\t\t<option value=\"py\">Python3</option>\n\t\t\t\t<option  value=\"rb\">Ruby</option>\n\t\t\t</select>\n\t\t\t<button onClick={handleSubmit}>Run</button>\n\t\t\t</div>\n\t\t\t<div className=\"columns is-mobile\">\n\t\t\t  <div className=\"column\">\n\t\t\t  \t<p style={{color: 'white', backgroundColor: 'black' }}>Input</p>\n\t\t\t\t<div className=\"control\">\n\t \t\t\t\t<textarea onKeyUp={handleInput} style={{borderColor: 'black', color: 'white', backgroundColor: 'black' }} className=\"textarea has-fixed-size\" rows=\"7\" cols=\"18\" placeholder=\"Input\" ></textarea>\n\t \t\t\t</div>\n\t\t\t  </div>\n\t\t\t  <div className=\"column\">\n\t\t\t  \t<p style={{color: 'white', backgroundColor: 'black' }}>Output</p>\n\t\t\t\t<div className=\"control\">\n\t \t\t\t\t<textarea style={{borderColor: 'black', color: 'white', backgroundColor: 'black' }} className=\"textarea has-fixed-size\" rows=\"7\" cols=\"18\" placeholder={output} readOnly>{output}</textarea>\n\t \t\t\t</div>\n\t\t\t  </div>\n\t\t\t</div>\n \t\t\t<footer className=\"ide-footer\">\n\t\t\t\t<p className=\"ide-dev\">Developed By Riyan Dhiman</p>\n\t\t\t\t<p className=\"ide-proj-link\">Link to Project <a className=\"ide-link\" href=\"https://github.com/Ryand1234/Online-Ide\">Github</a></p>\n\t\t\t</footer>\n\t\t\n\t</>)\n}\n//\"proxy\": \"https://floating-oasis-63694.herokuapp.com/\",\nexport default IDE;","import React from 'react'\nimport IDE from '../component/ide.componenent'\nimport './main.css'\nexport class PAGE extends React.Component {\n\t\n\trender(){\n\t\t\n\t\treturn (\n\t\t    <div>\n\t\t    \t<div className=\"ide-head\">\n\t\t\t\t\t<h1 className=\"ide-head-content\"> Online IDE </h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"ide-content\">\t\t\t\n\t\t\t\t      <IDE />\n\t\t\t\t</div>\n\t\t    </div>\n\t\t  );\n\t}\n}\n","import React from 'react';\nimport './App.css';\nimport {PAGE} from './pages/main.component'\n\nfunction App() {\n  return (\n    <div>\n      <PAGE />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}